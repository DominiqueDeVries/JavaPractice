
/* 
n? = 1 of niet.
n* = 0 of meer.
n+ =  1 of meer.
{x} = precies x keer.
{x,} = tenminste x keer.
{x,y}  = tenminste x, niet meer dan y.
*/
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {
  public static void main(String[] args) {
    Pattern pattern = Pattern.compile(".xx.");    // left and right of dot . does not matter. Within .  . must be the same.
    Matcher matcher = pattern.matcher("AxxB");
    
    System.out.println(matcher.matches());	 // True, there is a match -> matches()
  }
}

/*
Pattern pattern = Pattern.compile(".m"); 	// This pattern (patroon) will search in string.
    Matcher matcher = pattern.matcher(".am");	// String.
    boolean matchFound = matcher.find();
    
    System.out.println(matchFound);     	// True,  .m = find just one instance of any character.
    						// Wat voor de . staat maakt niet uit. Als maar aan het eind staat.
                                                                  
    boolean c = Pattern.matches(".m", "am");
    System.out.println(c);			// True.
   
       
    boolean d = Pattern.matches(".m", "maa");  	// False, m nniet aan het eind.
    System.out.println(d);
    
    boolean e = Pattern.matches(".m", "am am");  // False, 2x m mag niet.
    System.out.println(e);
    
   
    System.out.println(Pattern.matches("[amn]", "acd"));  // False, [amn] = vind 1 character tussen "acd".
   
    System.out.println(Pattern.matches("[acd]", "a"));	// True, [acd] = vind 1 character a tussen "acd".
   
    System.out.println(Pattern.matches("[xyz]", "wbcd")); // False, geen 1 match.
    
    System.out.println(Pattern.matches("[xyz]", "xxyyyz"));   // False x en y zijn meer dan 1.
    
    System.out.println(Pattern.matches("[^amn]", "c"));   // True, c staat er niet bij. [^amn] = Find one character NOT between the brackets
    
    System.out.println(Pattern.matches("[^amn]", "cn")); // False, er is wel eem match met 2x n.
    
     
    System.out.println(Pattern.matches("[a-zA-S]", "T"));   // Match met alles tusses a-z en A-S.
   															// False, T is geen kleine letter.
    
    System.out.println(Pattern.matches("[a-zA-S]", "t")); 	// True, moet beginnen met een kleine letter.
    
    System.out.println(Pattern.matches("[a-zA-S]", "S"));   // True, S valt binnen A-S. 
    
   
    System.out.println(Pattern.matches("[MS][a-z]{5}", "Monica")); // True.
 																                                   // Eerste woord moet beginnen hoofdletter M of S, daarna a-z, en na MS komt langte 5.
                                                                
    System.out.println(Pattern.matches("[xyz]?", "x"));  // True, x moet 0 of 1x voorkomen in xyz -->[xyz]?
     
    System.out.println(Pattern.matches("[xyz]?", "xxz"));  // False, xx moet 0 of 1x voorkomen in xyz -->[xyz]
    
    System.out.println(Pattern.matches("[xyz]+", "xx"));  // True x moet 1 of meer zijn --> []+
    
    System.out.println(Pattern.matches("[xyz]*", ""));  /// True, [xyz]*--> 0 of meer van x y of z
    
    System.out.println(Pattern.matches("[xyz]*", "a"));  /// False, [xyz]*--> 0 of meer van x y of z.
    
    System.out.println(Pattern.matches("[xyz]*", "xxyza")); // False, mag geen a.
    
    System.out.println(Pattern.matches("\\d", "1"));    	// True, vind een digit (cijfer).
  
   	System.out.println(Pattern.matches("\\d", "11"));  		// False
   
   	System.out.println(Pattern.matches("\\D", "1"));  		// False
  
//--------------------------------------------------------------------

 Pattern pattern = Pattern.compile("\\s");  //   \\s --> is er een whitesprace in de string?
	Matcher matcher = pattern.matcher("jhd ihd");
	boolean found = matcher.find();
    
    System.out.println(found); //true er is een whitespace

//------------------------------------------------------------------

Pattern pattern = Pattern.compile(".x.");
    Matcher matcher = pattern.matcher("AxxB");
    
    System.out.println(matcher.matches());	// false

//-------------------------------------------------
Pattern pattern = Pattern.compile(".xx.");
    Matcher matcher = pattern.matcher("AxB");
    
    System.out.println(matcher.matches());	// false

//----------------------------------------------------
 Pattern pattern = Pattern.compile("homewOrk");
    Matcher matcher = pattern.matcher("homework"); 
    boolean matchFound = matcher.find();
    if(matchFound) {
      System.out.println("Match found");
    } else {
      System.out.println("Match not found");    // Match not found. 
    }
  
  //---------------------------------------------------
  
   Pattern pattern = Pattern.compile("homework");
    Matcher matcher = pattern.matcher("homework"); 
    boolean matchFound = matcher.find();
    if(matchFound) {
      System.out.println("Match found");		// Match found
    } else {
      System.out.println("Match not found");    
    }
  
  //--------------------------------------------------
  
 Pattern pattern = Pattern.compile("hOmewOrk", Pattern.CASE_INSENSITIVE);
    Matcher matcher = pattern.matcher("Do your hoMeworK");
    boolean matchFound = matcher.find();
    if(matchFound) {
      System.out.println("Match found");  // Match found, because of CASE_INSENSITIVE
    } else {
      System.out.println("Match not found");
    }
  
*/
