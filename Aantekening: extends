// Inheritence: to inherit methods/attributes from one class to another.
// 2 categories: superclass (parent) and subclass (child).

class Vehicle {                                 // superclass

  protected String brand = "Ford";
  
  public void honk() {
    System.out.println("Tuut, tuut!");          // via object van class Car, call je brand en honk()
  }
}

class Car extends Vehicle {                     // subclass: door extends krijg je inheritance

  private String modelName = "Mustang";
  
  public static void main(String[] args) {
  
    Car objectFastCar = new Car();             // object van subclass Car

    myFastCar.honk();                          // Call de honk() method: tuut, tuut!
    
    System.out.println(objectFastCar.brand + " " + objectFastCar.modelName);        // Tuut, tuut!
                                                                                    // Ford Mustang
    }
}
                
// Inheritance met private

class Vehicle {

  private String brand = "Ford";                // is nu private, dus een error
  
  public void honk() {
     System.out.println("Tuut, tuut!");
  }
}

class Car extends Vehicle {

   private String modelName = "Mustang";
   
   public static void main(String[] args) {
   
      Car myFastCar = new Car();

      myFastCar.honk();
          System.out.println(myFastCar.brand + " " + myFastCar.modelName);
       }
}
//----------------------------------------------------------------------------------------------------------
 // Polymorpisme = vindt plaats als er meerdere classen zijn waarbij gebruikt wordt gemaakt van
 // inheritance tussen deze classen, dus vaker extends van superclass.
 // Methodes van de superclass worden op verschillende manieren geimplenteerd bij subclasses.



class Animal {
  public void animalSound() {
    System.out.println("The animal makes a sound");
  }
}

class Pig extends Animal {
  public void animalSound() {
    System.out.println("The pig says: wee wee");
  }
}

class Dog extends Animal {
  public void animalSound() {
    System.out.println("The dog says: bow wow");
  }
}

class Main {
  public static void main(String[] args) {
    Animal myAnimal = new Animal();  // Create a Animal object
    Animal myPig = new Pig();  // Create a Pig object
    Animal myDog = new Dog();  // Create a Dog object
    myAnimal.animalSound();
    myPig.animalSound();
    myDog.animalSound();
  }
}

//-----------------------------------------------------------------------
//Abstraction: Abstract Classes and Methods --> ook met behulp van extends.
Hierdoor kan je bepaalde informatie verbergen en alleen essentiele informatie laten zien aan de user.
Abstraction kan behaald worden met abstracte classes en interfaces.

// abstract (non-acces modifier) valt te verdelen onder: 

1. abstract class. vb: abstract class Animal{} = restricted class en kan niet gebruikt worden om objecten hiervan te maken en 
                                                 om deze te accessen (te zien), moet deze geinherit worden van een andere class.
                                                 
2. abstract method. vb: public abstract void animalSound();. kan alleen gebruikt worden in een abstacte class en heeft geen body. Deze
                                                              wordt geleverd door de subclass (geinherit van superclass).
                                                              
                                                              Een abstract class kan abstract and regular methods tegelijk hebben.

// Abstract class

abstract class Animal {
                                                  // Abstract method (geen body). Kan geen object maken van abstract class.
  public abstract void animalSound();
                                                   // Regular method met een body.
  public void sleep() {
    System.out.println("Zzz");
  }
}

// Subclass (inherit van Animal)
class Pig extends Animal {                           // extends
  public void animalSound() {                        // abstract keyword is nu weg.
                                                     // de body van animalSound() wordt hier geleverd.
    System.out.println("The pig says: wee wee");
  }
}

class Main {
  public static void main(String[] args) {
    Pig myPig = new Pig(); // Create a Pig object
    myPig.animalSound();
    myPig.sleep();
  }
}

















