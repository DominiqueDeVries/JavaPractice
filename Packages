/*
Packages

You can have multiple main-methods in 1 package.

A default package don't have package declaration

*/

// Main.java
package com.oefening;

public class Main {
  public static void main(String[] args) {
   
   Oef.sayHi();
   }
}



// Oef.java
package com.oefening;

public class Oef{
	public static void main(String[] args) {
    
    public static void sayHi(){
    
    	System.out.println("Hi");
    }
    
	}
}


//------------------------------------------------------------------------------

// Boem.java

package aap;
import com.company.Loops;	// Import package com.company and class Loops to use var in class Boem.

public class Boem {
     public static void main(String[] args) {

        Loops obj3 = new Loops();

        System.out.println(obj3.var); // 8

        obj3.sayHi();                 // Hi
     }
 
 // Loops.java
  package com.company;

public class Loops {

    public int var = 8;  	// Without public Boem.java can not find var.

    public static void sayHi(){
        System.out.println("Hi");
    }
}   
     
//----------------------------------

Eigen package maken:

1. Zet package en naam van de package boven de class, bijv. package p1;. Dit staat boven in class C1. Naam van class is C1.

2. Sla dit op als file met bijv naam: Demo.java.

3. Compile the file: c:\workspace>javac Demo.java

3. Maak  nu een package voor deze file: c:\workspace>java p1.c1

3. Om de code van class C1 te executen: c:\workspace>java p1.c1
Direct onder c:\workspace> staat de output.

-d  =  de plek waar de class wordt opgeslagen. Kan ook andere directory gebruiken, zoals: c:/user (windows)

.   =  gebruik de package in dezelfde directory(punt).

javac -d . demo.java  = compile de package. Dit forceert de compiler een om package p1 te maken.

- Als er 2 packages (p1=packag en p2=subpackage) staan in code:  package p1.p2;
dan executen om deze manier:

	c:\workspace>java p1.p2.c1









